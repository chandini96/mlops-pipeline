# PIPELINE DEFINITION
# Name: mlops-full-pipeline
# Description: Complete MLOps pipeline: Data fetching, preprocessing, feature engineering, splitting, training, evaluation, and model registry.
# Inputs:
#    gcs_data_path: str [Default: 'gs://mlops-vl2/Heart_Disease_Prediction.csv']
#    model_type: str [Default: 'logistic_regression']
#    target_column: str [Default: 'Heart Disease']
components:
  comp-data-splitting:
    executorLabel: exec-data-splitting
    inputDefinitions:
      artifacts:
        input_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        random_state:
          defaultValue: 42.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        target_column:
          parameterType: STRING
        test_size:
          defaultValue: 0.2
          isOptional: true
          parameterType: NUMBER_DOUBLE
    outputDefinitions:
      artifacts:
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-evaluation-gating:
    executorLabel: exec-evaluation-gating
    inputDefinitions:
      artifacts:
        model_artifacts:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        metric_key:
          defaultValue: accuracy
          isOptional: true
          parameterType: STRING
        metric_threshold:
          defaultValue: 0.84
          isOptional: true
          parameterType: NUMBER_DOUBLE
        model_dirs:
          parameterType: STRING
        target_column:
          parameterType: STRING
    outputDefinitions:
      parameters:
        best_model_dir:
          parameterType: STRING
  comp-feature-engineering:
    executorLabel: exec-feature-engineering
    inputDefinitions:
      artifacts:
        input_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        target_column:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        scaled_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        scaler_path:
          parameterType: STRING
  comp-fetch-dataset-from-gcs:
    executorLabel: exec-fetch-dataset-from-gcs
    inputDefinitions:
      parameters:
        gcs_path:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        full_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-model-registry:
    executorLabel: exec-model-registry
    inputDefinitions:
      parameters:
        action:
          parameterType: STRING
        dataset_info:
          parameterType: STRING
        model_name:
          parameterType: STRING
        model_path:
          parameterType: STRING
        model_type:
          parameterType: STRING
        project:
          parameterType: STRING
        region:
          parameterType: STRING
        registry_path:
          defaultValue: gs://mlops-vl2/model-registry
          isOptional: true
          parameterType: STRING
        serving_container_image_uri:
          parameterType: STRING
        version:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      parameters:
        registry_output:
          parameterType: STRING
  comp-multi-model-training:
    executorLabel: exec-multi-model-training
    inputDefinitions:
      artifacts:
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        target_column:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model_artifacts:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        trained_model_dirs:
          parameterType: STRING
  comp-preprocess-dataset:
    executorLabel: exec-preprocess-dataset
    inputDefinitions:
      artifacts:
        input_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        preprocessed_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        encoders_path:
          parameterType: STRING
        features_path:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-data-splitting:
      container:
        args:
        - --input-dataset
        - '{{$.inputs.artifacts[''input_dataset''].path}}'
        - --target-column
        - '{{$.inputs.parameters[''target_column'']}}'
        - --test-size
        - '{{$.inputs.parameters[''test_size'']}}'
        - --random-state
        - '{{$.inputs.parameters[''random_state'']}}'
        - --train-path
        - '{{$.outputs.artifacts[''train_dataset''].path}}'
        - --test-path
        - '{{$.outputs.artifacts[''test_dataset''].path}}'
        image: us-central1-docker.pkg.dev/pro-vigil-dev/mlops/mlops-data-splitter:v1.0.0
        resources:
          cpuLimit: 4.0
          memoryLimit: 8.0
          resourceCpuLimit: '4'
          resourceMemoryLimit: 8G
    exec-evaluation-gating:
      container:
        args:
        - --model-artifacts
        - '{{$.inputs.artifacts[''model_artifacts''].path}}'
        - --model-dirs
        - '{{$.inputs.parameters[''model_dirs'']}}'
        - --test-dataset
        - '{{$.inputs.artifacts[''test_dataset''].path}}'
        - --target-column
        - '{{$.inputs.parameters[''target_column'']}}'
        - --metric-key
        - '{{$.inputs.parameters[''metric_key'']}}'
        - --metric-threshold
        - '{{$.inputs.parameters[''metric_threshold'']}}'
        - --output-file
        - '{{$.outputs.parameters[''best_model_dir''].output_file}}'
        image: us-central1-docker.pkg.dev/pro-vigil-dev/mlops/mlops-model-evaluator:v1.0.0
        resources:
          cpuLimit: 4.0
          memoryLimit: 8.0
          resourceCpuLimit: '4'
          resourceMemoryLimit: 8G
    exec-feature-engineering:
      container:
        args:
        - --input-dataset
        - '{{$.inputs.artifacts[''input_dataset''].path}}'
        - --target-column
        - '{{$.inputs.parameters[''target_column'']}}'
        - --output-dataset
        - '{{$.outputs.artifacts[''scaled_dataset''].path}}'
        - --scaler-path
        - '{{$.outputs.parameters[''scaler_path''].output_file}}'
        image: us-central1-docker.pkg.dev/pro-vigil-dev/mlops/mlops-feature-engineer:v1.0.3
        resources:
          cpuLimit: 4.0
          memoryLimit: 8.0
          resourceCpuLimit: '4'
          resourceMemoryLimit: 8G
    exec-fetch-dataset-from-gcs:
      container:
        args:
        - --gcs-path
        - '{{$.inputs.parameters[''gcs_path'']}}'
        - --full-dataset
        - '{{$.outputs.artifacts[''full_dataset''].path}}'
        image: us-central1-docker.pkg.dev/pro-vigil-dev/mlops/mlops-data-fetcher:v1.0.6
        resources:
          cpuLimit: 4.0
          memoryLimit: 8.0
          resourceCpuLimit: '4'
          resourceMemoryLimit: 8G
    exec-model-registry:
      container:
        args:
        - --action
        - '{{$.inputs.parameters[''action'']}}'
        - --registry-path
        - '{{$.inputs.parameters[''registry_path'']}}'
        - --model-name
        - '{{$.inputs.parameters[''model_name'']}}'
        - --model-path
        - '{{$.inputs.parameters[''model_path'']}}'
        - --model-type
        - '{{$.inputs.parameters[''model_type'']}}'
        - --dataset-info
        - '{{$.inputs.parameters[''dataset_info'']}}'
        - --version
        - '{{$.inputs.parameters[''version'']}}'
        - --project
        - '{{$.inputs.parameters[''project'']}}'
        - --region
        - '{{$.inputs.parameters[''region'']}}'
        - --serving-container-image-uri
        - '{{$.inputs.parameters[''serving_container_image_uri'']}}'
        - --output-file
        - '{{$.outputs.parameters[''registry_output''].output_file}}'
        image: us-central1-docker.pkg.dev/pro-vigil-dev/mlops/mlops-model-registry:v2.0.5
        resources:
          cpuLimit: 1.0
          memoryLimit: 2.0
          resourceCpuLimit: '1'
          resourceMemoryLimit: 2G
    exec-multi-model-training:
      container:
        args:
        - --train-dataset
        - '{{$.inputs.artifacts[''train_dataset''].path}}'
        - --test-dataset
        - '{{$.inputs.artifacts[''test_dataset''].path}}'
        - --target-column
        - '{{$.inputs.parameters[''target_column'']}}'
        - --model-paths-dir
        - '{{$.outputs.artifacts[''model_artifacts''].path}}'
        - --output-file
        - '{{$.outputs.parameters[''trained_model_dirs''].output_file}}'
        image: us-central1-docker.pkg.dev/pro-vigil-dev/mlops/mlops-multi-model-trainer:v2.0.0
        resources:
          cpuLimit: 8.0
          memoryLimit: 16.0
          resourceCpuLimit: '8'
          resourceMemoryLimit: 16G
    exec-preprocess-dataset:
      container:
        args:
        - --input_csv
        - '{{$.inputs.artifacts[''input_dataset''].path}}'
        - --preprocessed_dataset_output
        - '{{$.outputs.artifacts[''preprocessed_dataset''].path}}'
        - --features_output
        - '{{$.outputs.parameters[''features_path''].output_file}}'
        - --encoders_output
        - '{{$.outputs.parameters[''encoders_path''].output_file}}'
        image: us-central1-docker.pkg.dev/pro-vigil-dev/mlops/mlops-data-preprocessor:v1.0.7
        resources:
          cpuLimit: 4.0
          memoryLimit: 8.0
          resourceCpuLimit: '4'
          resourceMemoryLimit: 8G
pipelineInfo:
  description: 'Complete MLOps pipeline: Data fetching, preprocessing, feature engineering,
    splitting, training, evaluation, and model registry.'
  name: mlops-full-pipeline
root:
  dag:
    tasks:
      data-splitting:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-data-splitting
        dependentTasks:
        - feature-engineering
        inputs:
          artifacts:
            input_dataset:
              taskOutputArtifact:
                outputArtifactKey: scaled_dataset
                producerTask: feature-engineering
          parameters:
            target_column:
              componentInputParameter: target_column
        taskInfo:
          name: data-splitting
      evaluation-gating:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluation-gating
        dependentTasks:
        - data-splitting
        - multi-model-training
        inputs:
          artifacts:
            model_artifacts:
              taskOutputArtifact:
                outputArtifactKey: model_artifacts
                producerTask: multi-model-training
            test_dataset:
              taskOutputArtifact:
                outputArtifactKey: test_dataset
                producerTask: data-splitting
          parameters:
            metric_key:
              runtimeValue:
                constant: accuracy
            metric_threshold:
              runtimeValue:
                constant: 0.84
            model_dirs:
              taskOutputParameter:
                outputParameterKey: trained_model_dirs
                producerTask: multi-model-training
            target_column:
              componentInputParameter: target_column
        taskInfo:
          name: evaluation-gating
      feature-engineering:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-feature-engineering
        dependentTasks:
        - preprocess-dataset
        inputs:
          artifacts:
            input_dataset:
              taskOutputArtifact:
                outputArtifactKey: preprocessed_dataset
                producerTask: preprocess-dataset
          parameters:
            target_column:
              componentInputParameter: target_column
        taskInfo:
          name: feature-engineering
      fetch-dataset-from-gcs:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-fetch-dataset-from-gcs
        inputs:
          parameters:
            gcs_path:
              componentInputParameter: gcs_data_path
        taskInfo:
          name: fetch-dataset-from-gcs
      model-registry:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-registry
        dependentTasks:
        - evaluation-gating
        inputs:
          parameters:
            action:
              runtimeValue:
                constant: register
            dataset_info:
              runtimeValue:
                constant: 'Dataset: {{$.inputs.parameters[''pipelinechannel--gcs_data_path'']}},
                  Target: {{$.inputs.parameters[''pipelinechannel--target_column'']}}'
            model_name:
              runtimeValue:
                constant: heart-disease-classifier
            model_path:
              taskOutputParameter:
                outputParameterKey: best_model_dir
                producerTask: evaluation-gating
            model_type:
              componentInputParameter: model_type
            pipelinechannel--gcs_data_path:
              componentInputParameter: gcs_data_path
            pipelinechannel--target_column:
              componentInputParameter: target_column
            project:
              runtimeValue:
                constant: pro-vigil-dev
            region:
              runtimeValue:
                constant: us-central1
            registry_path:
              runtimeValue:
                constant: gs://mlops-vl2/model-registry
            serving_container_image_uri:
              runtimeValue:
                constant: us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.1-0:latest
            version:
              runtimeValue:
                constant: ''
        taskInfo:
          name: model-registry
      multi-model-training:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-multi-model-training
        dependentTasks:
        - data-splitting
        inputs:
          artifacts:
            test_dataset:
              taskOutputArtifact:
                outputArtifactKey: test_dataset
                producerTask: data-splitting
            train_dataset:
              taskOutputArtifact:
                outputArtifactKey: train_dataset
                producerTask: data-splitting
          parameters:
            target_column:
              componentInputParameter: target_column
        taskInfo:
          name: multi-model-training
      preprocess-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess-dataset
        dependentTasks:
        - fetch-dataset-from-gcs
        inputs:
          artifacts:
            input_dataset:
              taskOutputArtifact:
                outputArtifactKey: full_dataset
                producerTask: fetch-dataset-from-gcs
        taskInfo:
          name: preprocess-dataset
  inputDefinitions:
    parameters:
      gcs_data_path:
        defaultValue: gs://mlops-vl2/Heart_Disease_Prediction.csv
        isOptional: true
        parameterType: STRING
      model_type:
        defaultValue: logistic_regression
        isOptional: true
        parameterType: STRING
      target_column:
        defaultValue: Heart Disease
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.1
