# PIPELINE DEFINITION
# Name: heart-disease-mlops-pipeline-fixed
# Description: Complete MLOps pipeline: Data fetching, preprocessing, feature engineering, splitting, training, and model registry.
# Inputs:
#    experiment_name: str [Default: 'heart-disease-classification-experiment']
#    gcs_data_path: str [Default: 'gs://mlops-vl2/Heart_Disease_Prediction.csv']
#    model_type: str [Default: 'logistic_regression']
#    target_column: str [Default: 'Heart Disease']
components:
  comp-data-splitting:
    executorLabel: exec-data-splitting
    inputDefinitions:
      parameters:
        input_dataset:
          parameterType: STRING
        random_state:
          defaultValue: 42.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        target_column:
          defaultValue: Heart Disease
          isOptional: true
          parameterType: STRING
        test_path:
          defaultValue: gs://mlops-vl2/test_heart_disease.csv
          isOptional: true
          parameterType: STRING
        test_size:
          defaultValue: 0.2
          isOptional: true
          parameterType: NUMBER_DOUBLE
        train_path:
          defaultValue: gs://mlops-vl2/train_heart_disease.csv
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      parameters:
        test_dataset:
          parameterType: STRING
        train_dataset:
          parameterType: STRING
  comp-feature-engineering:
    executorLabel: exec-feature-engineering
    inputDefinitions:
      parameters:
        input_dataset:
          parameterType: STRING
        output_dataset:
          defaultValue: gs://mlops-vl2/scaled_heart_disease.csv
          isOptional: true
          parameterType: STRING
        scaler_path:
          defaultValue: gs://mlops-vl2/heart_disease_scaler.joblib
          isOptional: true
          parameterType: STRING
        target_column:
          defaultValue: HeartDisease
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      parameters:
        scaled_dataset:
          parameterType: STRING
        scaler_model:
          parameterType: STRING
  comp-fetch-dataset-from-gcs:
    executorLabel: exec-fetch-dataset-from-gcs
    inputDefinitions:
      parameters:
        gcs_path:
          defaultValue: gs://mlops-vl2/Heart_Disease_Prediction.csv
          isOptional: true
          parameterType: STRING
    outputDefinitions:
      parameters:
        full_dataset:
          parameterType: STRING
  comp-logistic-regression-training:
    executorLabel: exec-logistic-regression-training
    inputDefinitions:
      parameters:
        metrics_path:
          defaultValue: gs://mlops-vl2/logistic_regression_metrics.json
          isOptional: true
          parameterType: STRING
        model_path:
          defaultValue: gs://mlops-vl2/logistic_regression_model.joblib
          isOptional: true
          parameterType: STRING
        target_column:
          defaultValue: Heart Disease
          isOptional: true
          parameterType: STRING
        test_dataset:
          parameterType: STRING
        train_dataset:
          parameterType: STRING
    outputDefinitions:
      parameters:
        trained_model:
          parameterType: STRING
        training_metrics:
          parameterType: STRING
  comp-model-registry:
    executorLabel: exec-model-registry
    inputDefinitions:
      parameters:
        action:
          parameterType: STRING
        dataset_info:
          parameterType: STRING
        environment:
          defaultValue: production
          isOptional: true
          parameterType: STRING
        metrics_path:
          parameterType: STRING
        model_name:
          parameterType: STRING
        model_path:
          parameterType: STRING
        model_type:
          parameterType: STRING
        output_path:
          parameterType: STRING
        registry_path:
          defaultValue: gs://mlops-vl2/model_registry
          isOptional: true
          parameterType: STRING
        version:
          parameterType: STRING
        versions:
          parameterType: STRING
    outputDefinitions:
      parameters:
        registry_output:
          parameterType: STRING
  comp-preprocess-dataset:
    executorLabel: exec-preprocess-dataset
    inputDefinitions:
      parameters:
        gcs_output_path:
          defaultValue: gs://mlops-vl2/preprocessed_heart_disease_dataset.csv
          isOptional: true
          parameterType: STRING
        input_dataset:
          parameterType: STRING
    outputDefinitions:
      parameters:
        encoders_path:
          parameterType: STRING
        features_path:
          parameterType: STRING
        preprocessed_dataset:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-data-splitting:
      container:
        args:
        - --input-dataset
        - '{{$.inputs.parameters[''input_dataset'']}}'
        - --target-column
        - '{{$.inputs.parameters[''target_column'']}}'
        - --test-size
        - '{{$.inputs.parameters[''test_size'']}}'
        - --random-state
        - '{{$.inputs.parameters[''random_state'']}}'
        - --train-path
        - '{{$.inputs.parameters[''train_path'']}}'
        - --test-path
        - '{{$.inputs.parameters[''test_path'']}}'
        command:
        - python3
        - /app/data_splitter.py
        image: gcr.io/pro-vigil-dev/mlops-data-splitter:v1.0.0
        resources:
          cpuLimit: 2.0
          memoryLimit: 4.0
          resourceCpuLimit: '2'
          resourceMemoryLimit: 4G
    exec-feature-engineering:
      container:
        args:
        - --input-dataset
        - '{{$.inputs.parameters[''input_dataset'']}}'
        - --target-column
        - '{{$.inputs.parameters[''target_column'']}}'
        - --output-dataset
        - '{{$.inputs.parameters[''output_dataset'']}}'
        - --scaler-path
        - '{{$.inputs.parameters[''scaler_path'']}}'
        command:
        - python3
        - /app/feature_engineer.py
        image: gcr.io/pro-vigil-dev/mlops-feature-engineer:v1.0.0
        resources:
          cpuLimit: 2.0
          memoryLimit: 4.0
          resourceCpuLimit: '2'
          resourceMemoryLimit: 4G
    exec-fetch-dataset-from-gcs:
      container:
        args:
        - --gcs-path
        - '{{$.inputs.parameters[''gcs_path'']}}'
        - --full-dataset
        - '{{$.outputs.parameters[''full_dataset''].output_file}}'
        command:
        - python3
        - /app/data_fetcher.py
        image: gcr.io/pro-vigil-dev/mlops-data-fetcher:v1.0.0
        resources:
          cpuLimit: 2.0
          memoryLimit: 4.0
          resourceCpuLimit: '2'
          resourceMemoryLimit: 4G
    exec-logistic-regression-training:
      container:
        args:
        - --train-dataset
        - '{{$.inputs.parameters[''train_dataset'']}}'
        - --test-dataset
        - '{{$.inputs.parameters[''test_dataset'']}}'
        - --target-column
        - '{{$.inputs.parameters[''target_column'']}}'
        - --model-path
        - '{{$.inputs.parameters[''model_path'']}}'
        - --metrics-path
        - '{{$.inputs.parameters[''metrics_path'']}}'
        command:
        - python3
        - /app/logistic_regression_trainer.py
        image: gcr.io/pro-vigil-dev/mlops-model-trainer:v1.0.0
        resources:
          cpuLimit: 4.0
          memoryLimit: 8.0
          resourceCpuLimit: '4'
          resourceMemoryLimit: 8G
    exec-model-registry:
      container:
        args:
        - --action
        - '{{$.inputs.parameters[''action'']}}'
        - --registry-path
        - '{{$.inputs.parameters[''registry_path'']}}'
        - --model-name
        - '{{$.inputs.parameters[''model_name'']}}'
        - --model-path
        - '{{$.inputs.parameters[''model_path'']}}'
        - --metrics-path
        - '{{$.inputs.parameters[''metrics_path'']}}'
        - --model-type
        - '{{$.inputs.parameters[''model_type'']}}'
        - --dataset-info
        - '{{$.inputs.parameters[''dataset_info'']}}'
        - --version
        - '{{$.inputs.parameters[''version'']}}'
        - --environment
        - '{{$.inputs.parameters[''environment'']}}'
        - --versions
        - '{{$.inputs.parameters[''versions'']}}'
        - --output-path
        - '{{$.inputs.parameters[''output_path'']}}'
        command:
        - python3
        - /app/model_registry.py
        image: gcr.io/pro-vigil-dev/mlops-model-registry:v1.0.0
        resources:
          cpuLimit: 2.0
          memoryLimit: 4.0
          resourceCpuLimit: '2'
          resourceMemoryLimit: 4G
    exec-preprocess-dataset:
      container:
        args:
        - --input-dataset
        - '{{$.inputs.parameters[''input_dataset'']}}'
        - --gcs-output-path
        - '{{$.inputs.parameters[''gcs_output_path'']}}'
        command:
        - python3
        - /app/data_preprocessor.py
        image: gcr.io/pro-vigil-dev/mlops-data-preprocessor:v1.0.0
        resources:
          cpuLimit: 2.0
          memoryLimit: 4.0
          resourceCpuLimit: '2'
          resourceMemoryLimit: 4G
pipelineInfo:
  description: 'Complete MLOps pipeline: Data fetching, preprocessing, feature engineering,
    splitting, training, and model registry.'
  name: heart-disease-mlops-pipeline-fixed
root:
  dag:
    tasks:
      data-splitting:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-data-splitting
        dependentTasks:
        - feature-engineering
        inputs:
          parameters:
            input_dataset:
              taskOutputParameter:
                outputParameterKey: scaled_dataset
                producerTask: feature-engineering
            target_column:
              componentInputParameter: target_column
            test_path:
              runtimeValue:
                constant: gs://mlops-vl2/test_heart_disease.csv
            train_path:
              runtimeValue:
                constant: gs://mlops-vl2/train_heart_disease.csv
        taskInfo:
          name: data-splitting
      feature-engineering:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-feature-engineering
        dependentTasks:
        - preprocess-dataset
        inputs:
          parameters:
            input_dataset:
              taskOutputParameter:
                outputParameterKey: preprocessed_dataset
                producerTask: preprocess-dataset
            output_dataset:
              runtimeValue:
                constant: gs://mlops-vl2/scaled_heart_disease.csv
            scaler_path:
              runtimeValue:
                constant: gs://mlops-vl2/heart_disease_scaler.joblib
            target_column:
              componentInputParameter: target_column
        taskInfo:
          name: feature-engineering
      fetch-dataset-from-gcs:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-fetch-dataset-from-gcs
        inputs:
          parameters:
            gcs_path:
              componentInputParameter: gcs_data_path
        taskInfo:
          name: fetch-dataset-from-gcs
      logistic-regression-training:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-logistic-regression-training
        dependentTasks:
        - data-splitting
        inputs:
          parameters:
            metrics_path:
              runtimeValue:
                constant: gs://mlops-vl2/{{$.inputs.parameters['pipelinechannel--model_type']}}_metrics.json
            model_path:
              runtimeValue:
                constant: gs://mlops-vl2/{{$.inputs.parameters['pipelinechannel--model_type']}}_model.joblib
            pipelinechannel--model_type:
              componentInputParameter: model_type
            target_column:
              componentInputParameter: target_column
            test_dataset:
              taskOutputParameter:
                outputParameterKey: test_dataset
                producerTask: data-splitting
            train_dataset:
              taskOutputParameter:
                outputParameterKey: train_dataset
                producerTask: data-splitting
        taskInfo:
          name: logistic-regression-training
      model-registry:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-registry
        dependentTasks:
        - logistic-regression-training
        inputs:
          parameters:
            action:
              runtimeValue:
                constant: register
            dataset_info:
              runtimeValue:
                constant: Heart Disease dataset with {{$.inputs.parameters['pipelinechannel--target_column']}}
                  as target
            environment:
              runtimeValue:
                constant: production
            metrics_path:
              taskOutputParameter:
                outputParameterKey: training_metrics
                producerTask: logistic-regression-training
            model_name:
              runtimeValue:
                constant: heart_disease_{{$.inputs.parameters['pipelinechannel--model_type']}}
            model_path:
              taskOutputParameter:
                outputParameterKey: trained_model
                producerTask: logistic-regression-training
            model_type:
              componentInputParameter: model_type
            output_path:
              runtimeValue:
                constant: gs://mlops-vl2/model_registry_output.json
            pipelinechannel--model_type:
              componentInputParameter: model_type
            pipelinechannel--target_column:
              componentInputParameter: target_column
            registry_path:
              runtimeValue:
                constant: gs://mlops-vl2/model_registry
            version:
              runtimeValue:
                constant: ''
            versions:
              runtimeValue:
                constant: ''
        taskInfo:
          name: model-registry
      preprocess-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess-dataset
        dependentTasks:
        - fetch-dataset-from-gcs
        inputs:
          parameters:
            gcs_output_path:
              runtimeValue:
                constant: gs://mlops-vl2/preprocessed_heart_disease.csv
            input_dataset:
              taskOutputParameter:
                outputParameterKey: full_dataset
                producerTask: fetch-dataset-from-gcs
        taskInfo:
          name: preprocess-dataset
  inputDefinitions:
    parameters:
      experiment_name:
        defaultValue: heart-disease-classification-experiment
        isOptional: true
        parameterType: STRING
      gcs_data_path:
        defaultValue: gs://mlops-vl2/Heart_Disease_Prediction.csv
        isOptional: true
        parameterType: STRING
      model_type:
        defaultValue: logistic_regression
        isOptional: true
        parameterType: STRING
      target_column:
        defaultValue: Heart Disease
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.1
